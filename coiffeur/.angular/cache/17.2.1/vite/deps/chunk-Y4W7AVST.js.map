{
  "version": 3,
  "sources": ["../../../../../node_modules/@delon/acl/fesm2022/acl.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { Injectable, inject, ViewContainerRef, TemplateRef, Directive, Input, ElementRef, Renderer2, Injector, NgModule } from '@angular/core';\nimport { BehaviorSubject, filter, map, tap, Observable, of } from 'rxjs';\nimport * as i1 from '@delon/util/config';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { Router } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nconst ACL_DEFAULT_CONFIG = {\n  guard_url: `/403`\n};\n\n/**\n * ACL 控制服务，[在线文档](https://ng-alain.com/acl)\n */\nclass ACLService {\n  /** ACL变更通知 */\n  get change() {\n    return this.aclChange.asObservable();\n  }\n  /** 获取所有数据 */\n  get data() {\n    return {\n      full: this.full,\n      roles: this.roles,\n      abilities: this.abilities\n    };\n  }\n  get guard_url() {\n    return this.options.guard_url;\n  }\n  constructor(configSrv) {\n    this.roles = [];\n    this.abilities = [];\n    this.full = false;\n    this.aclChange = new BehaviorSubject(null);\n    this.options = configSrv.merge('acl', ACL_DEFAULT_CONFIG);\n  }\n  parseACLType(val) {\n    let t;\n    if (typeof val === 'number') {\n      t = {\n        ability: [val]\n      };\n    } else if (Array.isArray(val) && val.length > 0 && typeof val[0] === 'number') {\n      t = {\n        ability: val\n      };\n    } else if (typeof val === 'object' && !Array.isArray(val)) {\n      t = {\n        ...val\n      };\n    } else if (Array.isArray(val)) {\n      t = {\n        role: val\n      };\n    } else {\n      t = {\n        role: val == null ? [] : [val]\n      };\n    }\n    return {\n      except: false,\n      ...t\n    };\n  }\n  /**\n   * 设置当前用户角色或权限能力（会先清除所有）\n   */\n  set(value) {\n    this.full = false;\n    this.abilities = [];\n    this.roles = [];\n    this.add(value);\n    this.aclChange.next(value);\n  }\n  /**\n   * 标识当前用户为全量，即不受限\n   */\n  setFull(val) {\n    this.full = val;\n    this.aclChange.next(val);\n  }\n  /**\n   * 设置当前用户权限能力（会先清除所有）\n   */\n  setAbility(abilities) {\n    this.set({\n      ability: abilities\n    });\n  }\n  /**\n   * 设置当前用户角色（会先清除所有）\n   */\n  setRole(roles) {\n    this.set({\n      role: roles\n    });\n  }\n  /**\n   * 为当前用户增加角色或权限能力\n   */\n  add(value) {\n    if (value.role && value.role.length > 0) {\n      this.roles.push(...value.role);\n    }\n    if (value.ability && value.ability.length > 0) {\n      this.abilities.push(...value.ability);\n    }\n  }\n  /**\n   * 为当前用户附加角色\n   */\n  attachRole(roles) {\n    for (const val of roles) {\n      if (!this.roles.includes(val)) {\n        this.roles.push(val);\n      }\n    }\n    this.aclChange.next(this.data);\n  }\n  /**\n   * 为当前用户附加权限\n   */\n  attachAbility(abilities) {\n    for (const val of abilities) {\n      if (!this.abilities.includes(val)) {\n        this.abilities.push(val);\n      }\n    }\n    this.aclChange.next(this.data);\n  }\n  /**\n   * 为当前用户移除角色\n   */\n  removeRole(roles) {\n    for (const val of roles) {\n      const idx = this.roles.indexOf(val);\n      if (idx !== -1) {\n        this.roles.splice(idx, 1);\n      }\n    }\n    this.aclChange.next(this.data);\n  }\n  /**\n   * 为当前用户移除权限\n   */\n  removeAbility(abilities) {\n    for (const val of abilities) {\n      const idx = this.abilities.indexOf(val);\n      if (idx !== -1) {\n        this.abilities.splice(idx, 1);\n      }\n    }\n    this.aclChange.next(this.data);\n  }\n  /**\n   * 当前用户是否有对应角色，其实 `number` 表示Ability\n   *\n   * - 当 `full: true` 或参数 `null` 时返回 `true`\n   * - 若使用 `ACLType` 参数，可以指定 `mode` 校验模式\n   */\n  can(roleOrAbility) {\n    const {\n      preCan\n    } = this.options;\n    if (preCan) {\n      roleOrAbility = preCan(roleOrAbility);\n    }\n    const t = this.parseACLType(roleOrAbility);\n    let result = false;\n    if (this.full === true || !roleOrAbility) {\n      result = true;\n    } else {\n      if (t.role && t.role.length > 0) {\n        if (t.mode === 'allOf') {\n          result = t.role.every(v => this.roles.includes(v));\n        } else {\n          result = t.role.some(v => this.roles.includes(v));\n        }\n      }\n      if (t.ability && t.ability.length > 0) {\n        if (t.mode === 'allOf') {\n          result = t.ability.every(v => this.abilities.includes(v));\n        } else {\n          result = t.ability.some(v => this.abilities.includes(v));\n        }\n      }\n    }\n    return t.except === true ? !result : result;\n  }\n  /** @inner */\n  parseAbility(value) {\n    if (typeof value === 'number' || typeof value === 'string' || Array.isArray(value)) {\n      value = {\n        ability: Array.isArray(value) ? value : [value]\n      };\n    }\n    delete value.role;\n    return value;\n  }\n  /**\n   * 当前用户是否有对应权限点\n   */\n  canAbility(value) {\n    return this.can(this.parseAbility(value));\n  }\n  static {\n    this.ɵfac = function ACLService_Factory(t) {\n      return new (t || ACLService)(i0.ɵɵinject(i1.AlainConfigService));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: ACLService,\n      factory: ACLService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ACLService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: i1.AlainConfigService\n  }], null);\n})();\nclass ACLIfDirective {\n  constructor() {\n    this.srv = inject(ACLService);\n    this._viewContainer = inject(ViewContainerRef);\n    this._thenTemplateRef = inject(TemplateRef);\n    this._elseTemplateRef = null;\n    this._thenViewRef = null;\n    this._elseViewRef = null;\n    this._except = false;\n    this._change$ = this.srv.change.pipe(takeUntilDestroyed(), filter(r => r != null)).subscribe(() => this._updateView());\n  }\n  set aclIf(value) {\n    this._value = value;\n    this._updateView();\n  }\n  set aclIfThen(templateRef) {\n    this._thenTemplateRef = templateRef;\n    this._thenViewRef = null;\n    this._updateView();\n  }\n  set aclIfElse(templateRef) {\n    this._elseTemplateRef = templateRef;\n    this._elseViewRef = null;\n    this._updateView();\n  }\n  set except(value) {\n    this._except = value != null && `${value}` !== 'false';\n  }\n  get except() {\n    return this._except;\n  }\n  _updateView() {\n    const res = this.srv.can(this._value);\n    if (res && !this.except || !res && this.except) {\n      if (!this._thenViewRef) {\n        this._viewContainer.clear();\n        this._elseViewRef = null;\n        if (this._thenTemplateRef) {\n          this._thenViewRef = this._viewContainer.createEmbeddedView(this._thenTemplateRef);\n        }\n      }\n    } else {\n      if (!this._elseViewRef) {\n        this._viewContainer.clear();\n        this._thenViewRef = null;\n        if (this._elseTemplateRef) {\n          this._elseViewRef = this._viewContainer.createEmbeddedView(this._elseTemplateRef);\n        }\n      }\n    }\n  }\n  ngOnDestroy() {\n    this._change$.unsubscribe();\n  }\n  static {\n    this.ɵfac = function ACLIfDirective_Factory(t) {\n      return new (t || ACLIfDirective)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: ACLIfDirective,\n      selectors: [[\"\", \"aclIf\", \"\"]],\n      inputs: {\n        aclIf: \"aclIf\",\n        aclIfThen: \"aclIfThen\",\n        aclIfElse: \"aclIfElse\",\n        except: \"except\"\n      },\n      exportAs: [\"aclIf\"],\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ACLIfDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[aclIf]',\n      exportAs: 'aclIf',\n      standalone: true\n    }]\n  }], () => [], {\n    aclIf: [{\n      type: Input\n    }],\n    aclIfThen: [{\n      type: Input\n    }],\n    aclIfElse: [{\n      type: Input\n    }],\n    except: [{\n      type: Input\n    }]\n  });\n})();\nclass ACLDirective {\n  set acl(value) {\n    this.set(value);\n  }\n  set ability(value) {\n    this.set(this.srv.parseAbility(value));\n  }\n  set(value) {\n    this._value = value;\n    const CLS = 'acl__hide';\n    const el = this.el;\n    if (this.srv.can(this._value)) {\n      this.renderer.removeClass(el, CLS);\n    } else {\n      this.renderer.addClass(el, CLS);\n    }\n  }\n  constructor() {\n    this.el = inject(ElementRef).nativeElement;\n    this.renderer = inject(Renderer2);\n    this.srv = inject(ACLService);\n    this.change$ = this.srv.change.pipe(takeUntilDestroyed(), filter(r => r != null)).subscribe(() => this.set(this._value));\n  }\n  ngOnDestroy() {\n    this.change$.unsubscribe();\n  }\n  static {\n    this.ɵfac = function ACLDirective_Factory(t) {\n      return new (t || ACLDirective)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: ACLDirective,\n      selectors: [[\"\", \"acl\", \"\"]],\n      inputs: {\n        acl: \"acl\",\n        ability: [i0.ɵɵInputFlags.None, \"acl-ability\", \"ability\"]\n      },\n      exportAs: [\"acl\"],\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ACLDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[acl]',\n      exportAs: 'acl',\n      standalone: true\n    }]\n  }], () => [], {\n    acl: [{\n      type: Input,\n      args: ['acl']\n    }],\n    ability: [{\n      type: Input,\n      args: ['acl-ability']\n    }]\n  });\n})();\n\n/**\n * NOTE：`ACLType` 类型可能会被其他类库所引用，为了减少类库间彼此的依赖性，其他类库会以复制的形式存在\n * 当这里有变化时，请务必同步更新，涉及：`MenuService.acl`、`util.AlainACLType`\n * TODO: 尝试增加 `@delon/core` 类库用于处理这种通用型\n */\n\nclass ACLGuardService {\n  constructor() {\n    this.srv = inject(ACLService);\n    this.router = inject(Router);\n    this.injector = inject(Injector);\n  }\n  process(data) {\n    data = {\n      guard: null,\n      guard_url: this.srv.guard_url,\n      ...data\n    };\n    let guard = data.guard;\n    if (typeof guard === 'function') guard = guard(this.srv, this.injector);\n    return (guard && guard instanceof Observable ? guard : of(guard != null ? guard : null)).pipe(map(v => this.srv.can(v)), tap(v => {\n      if (v) return;\n      this.router.navigateByUrl(data.guard_url);\n    }));\n  }\n  static {\n    this.ɵfac = function ACLGuardService_Factory(t) {\n      return new (t || ACLGuardService)();\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: ACLGuardService,\n      factory: ACLGuardService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ACLGuardService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\n * Routing guard prevent unauthorized users visit the page, [ACL Document](https://ng-alain.com/acl).\n *\n * ```ts\n * data: {\n *  path: 'home',\n *  canActivate: [ aclCanActivate ],\n *  data: { guard: 'user1' }\n * }\n * ```\n */\nconst aclCanActivate = route => inject(ACLGuardService).process(route.data);\n/**\n * Routing guard prevent unauthorized users visit the page, [ACL Document](https://ng-alain.com/acl).\n *\n * ```ts\n * data: {\n *  path: 'home',\n *  canActivateChild: [ aclCanActivateChild ],\n *  data: { guard: 'user1' }\n * }\n * ```\n */\nconst aclCanActivateChild = route => inject(ACLGuardService).process(route.data);\n/**\n * Routing guard prevent unauthorized users visit the page, [ACL Document](https://ng-alain.com/acl).\n *\n * ```ts\n * data: {\n *  path: 'home',\n *  canMatch: [ aclCanMatch ],\n *  data: { guard: 'user1' }\n * }\n * ```\n */\nconst aclCanMatch = route => inject(ACLGuardService).process(route.data);\nconst COMPONENTS = [ACLDirective, ACLIfDirective];\nclass DelonACLModule {\n  static {\n    this.ɵfac = function DelonACLModule_Factory(t) {\n      return new (t || DelonACLModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: DelonACLModule,\n      imports: [CommonModule, ACLDirective, ACLIfDirective],\n      exports: [ACLDirective, ACLIfDirective]\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [CommonModule]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DelonACLModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, ...COMPONENTS],\n      exports: COMPONENTS\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ACLDirective, ACLGuardService, ACLIfDirective, ACLService, ACL_DEFAULT_CONFIG, DelonACLModule, aclCanActivate, aclCanActivateChild, aclCanMatch };\n"],
  "mappings": "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",
  "names": []
}
