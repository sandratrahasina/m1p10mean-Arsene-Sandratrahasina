{
  "version": 3,
  "sources": ["../../../../../node_modules/@delon/util/fesm2022/decorator.mjs"],
  "sourcesContent": ["import { warn } from '@delon/util/other';\n\nfunction propDecoratorFactory(name, fallback, defaultValue) {\n    function propDecorator(target, propName, originalDescriptor) {\n        const privatePropName = `$$__${propName}`;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (Object.prototype.hasOwnProperty.call(target, privatePropName)) {\n                warn(`The prop \"${privatePropName}\" is already exist, it will be overrided by ${name} decorator.`);\n            }\n        }\n        Object.defineProperty(target, privatePropName, {\n            configurable: true,\n            writable: true\n        });\n        return {\n            get() {\n                return originalDescriptor && originalDescriptor.get\n                    ? originalDescriptor.get.bind(this)()\n                    : this[privatePropName];\n            },\n            set(value) {\n                if (originalDescriptor && originalDescriptor.set) {\n                    originalDescriptor.set.bind(this)(fallback(value, defaultValue));\n                }\n                this[privatePropName] = fallback(value, defaultValue);\n            }\n        };\n    }\n    return propDecorator;\n}\nfunction toBoolean(value, defaultValue = false) {\n    return value == null ? defaultValue : `${value}` !== 'false';\n}\n/**\n * @deprecated Recommended to use the built-in `transform` and `static ngAcceptInputType_` can be removed\n * - Use `@Input({ transform: booleanAttribute })` instead of `@InputBoolean()`\n * - Use `@Input({ transform: (v: unknown) => (v == null ? null : booleanAttribute(v)) })` instead of `@InputBoolean(null)`\n *\n * Input decorator that handle a prop to do get/set automatically with toBoolean\n *\n * ```ts\n * {AT}Input() {AT}InputBoolean() visible: boolean = false;\n * {AT}Input() {AT}InputBoolean(null) visible: boolean = false;\n * ```\n */\nfunction InputBoolean(defaultValue = false) {\n    return propDecoratorFactory('InputBoolean', toBoolean, defaultValue);\n}\nfunction toNumber(value, fallbackValue = 0) {\n    return !isNaN(parseFloat(value)) && !isNaN(Number(value)) ? Number(value) : fallbackValue;\n}\n/**\n * @deprecated Recommended to use the built-in `transform` and `static ngAcceptInputType_` can be removed\n * - Use `@Input({ transform: numberAttribute })` instead of `@InputNumber()`\n * - Use `@Input({ transform: (v: unknown) => (v == null ? null : numberAttribute(v)) })` instead of `@InputNumber(null)`\n *\n * Input decorator that handle a prop to do get/set automatically with toNumber\n *\n * ```ts\n * {AT}Input() {AT}InputNumber() visible: number = 1;\n * {AT}Input() {AT}InputNumber(null) visible: number = 2;\n * ```\n */\nfunction InputNumber(defaultValue = 0) {\n    return propDecoratorFactory('InputNumber', toNumber, defaultValue);\n}\n\nfunction makeFn(type, options) {\n    return (_, __, descriptor) => {\n        const source = descriptor.value;\n        descriptor.value = function (...data) {\n            const that = this;\n            const ngZone = that[options?.ngZoneName || 'ngZone'];\n            if (!ngZone) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    warn(`ZoneOutside: Decorator should have 'ngZone' property with 'NgZone' class.`);\n                }\n                return source.call(this, ...data);\n            }\n            let res;\n            ngZone[type](() => {\n                res = source.call(this, ...data);\n            });\n            return res;\n        };\n        return descriptor;\n    };\n}\n/**\n * The decoration method runs in `runOutsideAngular`\n *\n * 装饰方法运行在 `runOutsideAngular` 内\n *\n * ```ts\n * class MockClass {\n *  readonly ngZone = inject(NgZone);\n *\n *  {AT}ZoneOutside()\n *  runOutsideAngular(): void {}\n * }\n * ```\n */\nfunction ZoneOutside(options) {\n    return makeFn('runOutsideAngular', options);\n}\n/**\n * The decoration method runs in `run`\n *\n * 装饰方法运行在 `run` 内\n *\n * ```ts\n * class MockClass {\n *  readonly ngZone = inject(NgZone);\n *\n *  {AT}ZoneRun()\n *  run(): void {}\n * }\n * ```\n */\nfunction ZoneRun(options) {\n    return makeFn('run', options);\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { InputBoolean, InputNumber, ZoneOutside, ZoneRun, toBoolean, toNumber };\n\n"],
  "mappings": ";;;;;AAmEA,SAAS,OAAO,MAAM,SAAS;AAC3B,SAAO,CAAC,GAAG,IAAI,eAAe;AAC1B,UAAM,SAAS,WAAW;AAC1B,eAAW,QAAQ,YAAa,MAAM;AAClC,YAAM,OAAO;AACb,YAAM,SAAS,KAAK,SAAS,cAAc,QAAQ;AACnD,UAAI,CAAC,QAAQ;AACT,YAAI,OAAO,cAAc,eAAe,WAAW;AAC/C,eAAK,2EAA2E;AAAA,QACpF;AACA,eAAO,OAAO,KAAK,MAAM,GAAG,IAAI;AAAA,MACpC;AACA,UAAI;AACJ,aAAO,IAAI,EAAE,MAAM;AACf,cAAM,OAAO,KAAK,MAAM,GAAG,IAAI;AAAA,MACnC,CAAC;AACD,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AACJ;AAeA,SAAS,YAAY,SAAS;AAC1B,SAAO,OAAO,qBAAqB,OAAO;AAC9C;",
  "names": []
}
