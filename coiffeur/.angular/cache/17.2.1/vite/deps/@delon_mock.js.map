{
  "version": 3,
  "sources": ["../../../../../node_modules/@delon/mock/fesm2022/mock.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { InjectionToken, makeEnvironmentProviders, Injectable, Optional, Inject, inject } from '@angular/core';\nimport * as i1 from '@delon/util/config';\nimport { HttpErrorResponse, HttpResponseBase, HttpResponse } from '@angular/common/http';\nimport { of, isObservable, from, map, throwError, switchMap, delay as delay$1 } from 'rxjs';\nimport { deepCopy } from '@delon/util/other';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nclass MockStatusError {\n  constructor(status, error) {\n    this.status = status;\n    this.error = error;\n  }\n}\nconst MOCK_DEFULAT_CONFIG = {\n  delay: 300,\n  force: false,\n  log: true\n};\nconst DELON_MOCK_CONFIG = new InjectionToken('alain-mock-config');\nfunction provideMockConfig(config) {\n  return makeEnvironmentProviders([{\n    provide: DELON_MOCK_CONFIG,\n    useValue: config\n  }]);\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nclass MockService {\n  constructor(cogSrv, options) {\n    this.cached = [];\n    this.config = cogSrv.merge('mock', MOCK_DEFULAT_CONFIG);\n    this.setData(options?.data);\n  }\n  /**\n   * Reset request data\n   *\n   * 重新设置请求数据\n   */\n  setData(data) {\n    this.applyMock(data);\n  }\n  // #region parse rule\n  applyMock(data) {\n    this.cached = [];\n    try {\n      this.realApplyMock(data);\n    } catch (e) {\n      this.outputError(e);\n    }\n  }\n  realApplyMock(data) {\n    if (!data) return;\n    Object.keys(data).forEach(key => {\n      const rules = data[key];\n      if (!rules) return;\n      Object.keys(rules).forEach(ruleKey => {\n        const value = rules[ruleKey];\n        if (!(typeof value === 'function' || typeof value === 'object' || typeof value === 'string')) {\n          throw Error(`mock value of [${key}-${ruleKey}] should be function or object or string, but got ${typeof value}`);\n        }\n        const rule = this.genRule(ruleKey, value);\n        if (['GET', 'POST', 'PUT', 'HEAD', 'DELETE', 'PATCH', 'OPTIONS'].indexOf(rule.method) === -1) {\n          throw Error(`method of ${key}-${ruleKey} is not valid`);\n        }\n        const item = this.cached.find(w => w.url === rule.url && w.method === rule.method);\n        if (item) {\n          item.callback = rule.callback;\n        } else {\n          this.cached.push(rule);\n        }\n      });\n    });\n    // regular ordering\n    this.cached.sort((a, b) => (b.martcher || '').toString().length - (a.martcher || '').toString().length);\n  }\n  genRule(key, callback) {\n    let method = 'GET';\n    let url = key;\n    if (key.indexOf(' ') > -1) {\n      const splited = key.split(' ');\n      method = splited[0].toLowerCase();\n      url = splited[1];\n    }\n    let martcher = null;\n    let segments = [];\n    if (~url.indexOf(':')) {\n      segments = url.split('/').filter(segment => segment.startsWith(':')).map(v => v.substring(1));\n      const reStr = url.split('/').map(segment => segment.startsWith(':') ? `([^/]+)` : segment).join('/');\n      martcher = new RegExp(`^${reStr}`, 'i');\n    } else if (/(\\([^)]+\\))/i.test(url)) {\n      martcher = new RegExp(url, 'i');\n    }\n    return {\n      url,\n      martcher,\n      segments,\n      callback,\n      method: method.toUpperCase()\n    };\n  }\n  outputError(error) {\n    const filePath = error.message.split(': ')[0];\n    const errors = error.stack.split('\\n').filter(line => line.trim().indexOf('at ') !== 0).map(line => line.replace(`${filePath}: `, ''));\n    errors.splice(1, 0, '');\n    console.group();\n    console.warn(`==========Failed to parse mock config.==========`);\n    console.log(errors.join('\\n'));\n    console.groupEnd();\n    throw error;\n  }\n  // #endregion\n  getRule(method, url) {\n    method = (method || 'GET').toUpperCase();\n    const params = {};\n    const list = this.cached.filter(w => w.method === method && (w.martcher ? w.martcher.test(url) : w.url === url));\n    if (list.length === 0) return null;\n    const ret = list.find(w => w.url === url) || list[0];\n    if (ret.martcher) {\n      const execArr = ret.martcher.exec(url);\n      execArr.slice(1).map((value, index) => {\n        params[ret.segments[index]] = value;\n      });\n    }\n    return {\n      url,\n      method: ret.method,\n      params,\n      callback: ret.callback\n    };\n  }\n  clearCache() {\n    this.cached = [];\n  }\n  get rules() {\n    return this.cached;\n  }\n  ngOnDestroy() {\n    this.clearCache();\n  }\n  static {\n    this.ɵfac = function MockService_Factory(t) {\n      return new (t || MockService)(i0.ɵɵinject(i1.AlainConfigService), i0.ɵɵinject(DELON_MOCK_CONFIG, 8));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: MockService,\n      factory: MockService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MockService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: i1.AlainConfigService\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DELON_MOCK_CONFIG]\n    }]\n  }], null);\n})();\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst mockInterceptor = (req, next) => {\n  const src = inject(MockService);\n  const config = src.config;\n  const rule = src.getRule(req.method, req.url.split('?')[0]);\n  if (!rule && !config.force) {\n    return next(req);\n  }\n  let res$;\n  switch (typeof rule.callback) {\n    case 'function':\n      const mockRequest = {\n        original: req,\n        body: req.body,\n        queryString: {},\n        headers: {},\n        params: rule.params\n      };\n      const urlParams = req.url.split('?');\n      if (urlParams.length > 1) {\n        urlParams[1].split('&').forEach(item => {\n          const itemArr = item.split('=');\n          const key = itemArr[0];\n          const value = itemArr[1];\n          // is array\n          if (Object.keys(mockRequest.queryString).includes(key)) {\n            if (!Array.isArray(mockRequest.queryString[key])) {\n              mockRequest.queryString[key] = [mockRequest.queryString[key]];\n            }\n            mockRequest.queryString[key].push(value);\n          } else {\n            mockRequest.queryString[key] = value;\n          }\n        });\n      }\n      req.params.keys().forEach(key => mockRequest.queryString[key] = req.params.get(key));\n      req.headers.keys().forEach(key => mockRequest.headers[key] = req.headers.get(key));\n      try {\n        const fnRes = rule.callback.call(this, mockRequest);\n        res$ = isObservable(fnRes) ? fnRes : from(Promise.resolve(fnRes));\n      } catch (e) {\n        res$ = of(new HttpErrorResponse({\n          url: req.url,\n          headers: req.headers,\n          status: e instanceof MockStatusError ? e.status : 400,\n          statusText: e.statusText || 'Unknown Error',\n          error: e.error\n        }));\n      }\n      break;\n    default:\n      res$ = of(rule.callback);\n      break;\n  }\n  res$ = res$.pipe(map(res => res instanceof HttpResponseBase ? res : new HttpResponse({\n    status: 200,\n    url: req.url,\n    body: deepCopy(res)\n  })), map(res => {\n    const anyRes = res;\n    if (anyRes.body) {\n      anyRes.body = deepCopy(anyRes.body);\n    }\n    if (config.log) {\n      console.log(`%c👽${req.method}->${req.urlWithParams}->request`, 'background:#000;color:#bada55', req);\n      console.log(`%c👽${req.method}->${req.urlWithParams}->response`, 'background:#000;color:#bada55', res);\n    }\n    return res;\n  }), switchMap(res => res instanceof HttpErrorResponse ? throwError(() => res) : of(res)));\n  return res$.pipe(delay$1(config.delay));\n};\n\n/**\n * Used to simulate delays\n */\nfunction delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n/**\n * Return a random number\n */\nfunction r(min = 1, max = 100) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DELON_MOCK_CONFIG, MockService, MockStatusError, delay, mockInterceptor, provideMockConfig, r };\n"],
  "mappings": "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",
  "names": ["delay"]
}
